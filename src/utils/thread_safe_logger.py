"""Thread-safe logger –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
import logging
from typing import Optional
from datetime import datetime
from queue import Queue
import threading

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s'
)


class ThreadSafeLogger:
    """
    Thread-safe –ª–æ–≥–≥–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Queue –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –ª–æ–≥–æ–≤ –º–µ–∂–¥—É –ø–æ—Ç–æ–∫–∞–º–∏
    –∏ –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º Streamlit.
    """

    def __init__(self, name: str = "processing"):
        self.logger = logging.getLogger(name)
        self.log_queue: Queue = Queue()
        self._lock = threading.Lock()

    def log(self, message: str, level: str = "INFO"):
        """
        –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.

        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            level: –£—Ä–æ–≤–µ–Ω—å (INFO, SUCCESS, WARNING, ERROR, DEBUG)
        """
        timestamp = datetime.now().strftime("%H:%M:%S")

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π logger
        logger_func = getattr(self.logger, level.lower(), self.logger.info)
        logger_func(message)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è UI (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        with self._lock:
            self.log_queue.put({
                'timestamp': timestamp,
                'level': level,
                'message': message
            })

    def get_logs(self, max_items: Optional[int] = None) -> list:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.

        Args:
            max_items: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞

        Returns:
            –°–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤
        """
        logs = []
        count = 0

        while not self.log_queue.empty():
            if max_items and count >= max_items:
                break
            try:
                logs.append(self.log_queue.get_nowait())
                count += 1
            except:
                break

        return logs

    def format_for_ui(self, log_entry: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∞ –¥–ª—è UI."""
        icons = {
            "INFO": "‚ÑπÔ∏è",
            "SUCCESS": "‚úÖ",
            "WARNING": "‚ö†Ô∏è",
            "ERROR": "‚ùå",
            "DEBUG": "üîç"
        }

        icon = icons.get(log_entry['level'], "üìù")
        return f"{icon} `{log_entry['timestamp']}` {log_entry['message']}"


# Singleton
_logger_instance: Optional[ThreadSafeLogger] = None


def get_thread_safe_logger() -> ThreadSafeLogger:
    """–ü–æ–ª—É—á–∏—Ç—å singleton —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞."""
    global _logger_instance
    if _logger_instance is None:
        _logger_instance = ThreadSafeLogger()
    return _logger_instance