"""
Reddit scraper —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏, —Ä–µ–¥–∞–∫—Ç–æ—Ä—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ DEBUG —Ä–µ–∂–∏–º–∞.
"""
import os
import praw
import time
import logging
import requests  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è session
from datetime import datetime
from typing import Optional, Callable, Dict, Any
from prawcore.exceptions import ResponseException, RequestException
from src.models.database import save_reddit_post

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s'
)
logger = logging.getLogger(__name__)


class RedditScraperError(Exception):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—à–∏–±–æ–∫ Reddit scraper."""
    pass


class RedditAuthError(RedditScraperError):
    """–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Reddit API."""
    pass


def mask_credential(cred: str) -> str:
    """–ú–∞—Å–∫–∏—Ä—É–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–µ 4 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–∏–º–≤–æ–ª–∞)."""
    if len(cred) < 8:
        return "****"
    return f"{cred[:4]}...{cred[-4:]}"


def log_request(response, *args, **kwargs):
    """Hook –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ requests (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PRAW)."""
    request = response.request
    logger.debug(f"HTTP Request: {request.method} {request.url}")
    logger.debug(f"Headers: {request.headers}")
    if response.status_code >= 400:
        logger.error(f"HTTP Error: Status {response.status_code}")
        logger.error(f"Response Body: {response.text[:500]}...")  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–ª–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    else:
        logger.debug(f"HTTP Success: Status {response.status_code}")
    return response


def get_reddit_client(debug: bool = False) -> praw.Reddit:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ PRAW –¥–ª—è Reddit API.

    Args:
        debug: –í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä praw.Reddit

    Raises:
        RedditAuthError: –ï—Å–ª–∏ credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env
    """
    client_id = os.getenv("REDDIT_CLIENT_ID")
    client_secret = os.getenv("REDDIT_CLIENT_SECRET")
    user_agent = os.getenv("user_agent", "NewsAggregator/1.0")

    if not client_id or not client_secret:
        error_msg = "Reddit API credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env"
        logger.error(f"‚ùå {error_msg}")
        logger.info("üìã –î–æ–±–∞–≤—å—Ç–µ –≤ .env:")
        logger.info("   REDDIT_CLIENT_ID=–≤–∞—à_client_id")
        logger.info("   REDDIT_CLIENT_SECRET=–≤–∞—à_client_secret")
        raise RedditAuthError(error_msg)

    if debug:
        logger.debug(f"CLIENT_ID: {mask_credential(client_id)} (length: {len(client_id)})")
        logger.debug(f"CLIENT_SECRET: {mask_credential(client_secret)} (length: {len(client_secret)})")
        logger.debug(f"USER_AGENT: {user_agent}")

    if len(client_id) < 10 or len(client_secret) < 20:
        error_msg = "Reddit credentials –≤—ã–≥–ª—è–¥—è—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        logger.error(f"‚ùå {error_msg}")
        logger.error(f"   CLIENT_ID –¥–ª–∏–Ω–∞: {len(client_id)} (–æ–∂–∏–¥–∞–µ—Ç—Å—è 14-22)")
        logger.error(f"   SECRET –¥–ª–∏–Ω–∞: {len(client_secret)} (–æ–∂–∏–¥–∞–µ—Ç—Å—è 27-32)")
        raise RedditAuthError(error_msg)

    try:
        if debug:
            logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ PRAW –∫–ª–∏–µ–Ω—Ç–∞...")

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é session –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è hook
        session = requests.Session()
        session.hooks["response"].append(log_request)

        reddit = praw.Reddit(
            client_id=client_id,
            client_secret=client_secret,
            user_agent=user_agent,
            check_for_async=False,
            requestor_kwargs={"session": session}  # –ü–µ—Ä–µ–¥–∞–µ–º session –¥–ª—è hooks
        )

        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if debug:
            logger.debug("–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (subreddit 'python', hot limit=1)...")

        test_sub = reddit.subreddit("python")
        list(test_sub.hot(limit=1))

        logger.info("‚úÖ Reddit API –ø–æ–¥–∫–ª—é—á–µ–Ω")
        return reddit

    except ResponseException as e:
        if e.response.status_code == 401:
            error_msg = "401 Unauthorized - –Ω–µ–≤–µ—Ä–Ω—ã–µ Reddit credentials"
            logger.error(f"‚ùå {error_msg}")
            logger.error("üîß –†–µ—à–µ–Ω–∏–µ:")
            logger.error("   1. –û—Ç–∫—Ä–æ–π—Ç–µ https://www.reddit.com/prefs/apps")
            logger.error("   2. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (type: script)")
            logger.error("   3. –û–±–Ω–æ–≤–∏—Ç–µ .env —Å –Ω–æ–≤—ã–º–∏ credentials")

            if debug:
                logger.debug(f"Response status: {e.response.status_code}")
                logger.debug(f"Response text: {e.response.text[:200]}")

            raise RedditAuthError(error_msg) from e
        raise

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Reddit: {e}")
        raise


def scrape_subreddit(
    subreddit_name: str,
    max_posts: int = 1,
    sort_by: str = 'hot',
    enable_llm: bool = True,
    log_callback: Optional[Callable[[str, str], None]] = None,
    retry_on_error: bool = True,
    max_retries: int = 3,
    debug: bool = False
) -> Dict[str, Any]:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤ –∏–∑ –æ–¥–Ω–æ–≥–æ subreddit.

    Args:
        subreddit_name: –ù–∞–∑–≤–∞–Ω–∏–µ subreddit –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ r/
        max_posts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ (–¥–µ—Ñ–æ–ª—Ç: 1 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        sort_by: –¢–∏–ø —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ('hot', 'new', 'top')
        enable_llm: –í–∫–ª—é—á–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ GPT-OSS
        log_callback: Callback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ UI (message, level)
        retry_on_error: –ü–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        debug: –í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:
        {
            'success': bool,
            'subreddit': str,
            'saved': int,
            'skipped': int,
            'semantic_duplicates': int,
            'editorial_processed': int,
            'errors': int,
            'retries': int
        }
    """
    def log(message: str, level: str = "INFO"):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        logger_func = getattr(logger, level.lower(), logger.info)
        logger_func(message)

        # –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if log_callback:
            try:
                log_callback(message, level)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –≤ log_callback: {e}")

    log(f"–ü–∞—Ä—Å–∏–Ω–≥ r/{subreddit_name} (Editorial: {'ON' if enable_llm else 'OFF'})")

    if debug:
        log(f"DEBUG —Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω", "DEBUG")
        log(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: max_posts={max_posts}, sort={sort_by}", "DEBUG")

    retry_count = 0
    last_error = None

    while retry_count <= max_retries:
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ Reddit –∫–ª–∏–µ–Ω—Ç–∞
            reddit = get_reddit_client(debug=debug)
            subreddit = reddit.subreddit(subreddit_name)

            # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤
            if sort_by == 'hot':
                posts = subreddit.hot(limit=max_posts)
            elif sort_by == 'new':
                posts = subreddit.new(limit=max_posts)
            elif sort_by == 'top':
                posts = subreddit.top(limit=max_posts)
            else:
                log(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ '{sort_by}', –∏—Å–ø–æ–ª—å–∑—É—é 'hot'", "WARNING")
                posts = subreddit.hot(limit=max_posts)

            # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            saved_count = 0
            skipped_count = 0
            semantic_duplicates = 0
            editorial_processed_count = 0
            error_count = 0

            for idx, submission in enumerate(posts, 1):
                try:
                    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞
                    post_data = {
                        'post_id': submission.id,
                        'subreddit': submission.subreddit.display_name,
                        'title': submission.title,
                        'author': str(submission.author) if submission.author else '[deleted]',
                        'url': submission.url,
                        'selftext': submission.selftext if submission.is_self else '',
                        'score': submission.score,
                        'num_comments': submission.num_comments,
                        'created_utc': datetime.fromtimestamp(submission.created_utc),
                        'is_self': submission.is_self,
                        'link_flair_text': submission.link_flair_text
                    }

                    if debug:
                        log(f"  [{idx}/{max_posts}] Post ID: {submission.id}", "DEBUG")
                        log(f"  Title: {post_data['title'][:50]}...", "DEBUG")

                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º pipeline
                    result = save_reddit_post(
                        post_data,
                        check_semantic_duplicates=True,
                        process_with_editorial=enable_llm
                    )

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    if result['saved']:
                        saved_count += 1
                        log(f"  ‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ [{saved_count}]: {post_data['title'][:60]}...")

                        if result.get('editorial_processed'):
                            editorial_processed_count += 1
                            log(f"    ‚Üí Editorial –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                    else:
                        reason = result.get('reason', 'unknown')

                        if reason == 'duplicate_id':
                            skipped_count += 1
                            if debug:
                                log(f"  ‚äó –ü—Ä–æ–ø—É—â–µ–Ω: —Ç–æ—á–Ω—ã–π –¥—É–±–ª–∏–∫–∞—Ç", "DEBUG")

                        elif reason == 'duplicate_semantic':
                            semantic_duplicates += 1
                            dup_id = result.get('duplicate_of', 'unknown')
                            similarity = result.get('similarity', 0)
                            log(f"  ‚âà –ü—Ä–æ–ø—É—â–µ–Ω: —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –¥—É–±–ª–∏–∫–∞—Ç")
                            log(f"    –ü–æ—Ö–æ–∂ –Ω–∞: {dup_id} (—Å—Ö–æ–∂–µ—Å—Ç—å: {similarity:.2%})")

                        elif reason == 'too_short':
                            skipped_count += 1
                            if debug:
                                log(f"  ‚äò –ü—Ä–æ–ø—É—â–µ–Ω: —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π", "DEBUG")

                        else:
                            error_count += 1
                            log(f"  ‚úó –û—à–∏–±–∫–∞: {reason}", "WARNING")

                    # Rate limiting
                    if idx < max_posts:
                        time.sleep(0.5)

                except Exception as e:
                    error_count += 1
                    log(f"  ‚úó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞: {e}", "ERROR")
                    if debug:
                        import traceback
                        log(f"  Traceback: {traceback.format_exc()}", "DEBUG")
                    continue

            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            log(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ r/{subreddit_name}:")
            log(f"  ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved_count}")
            log(f"  ‚Ä¢ ID –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {skipped_count}")
            log(f"  ‚Ä¢ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {semantic_duplicates}")
            log(f"  ‚Ä¢ Editorial –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {editorial_processed_count}")
            if error_count > 0:
                log(f"  ‚Ä¢ –û—à–∏–±–æ–∫: {error_count}", "WARNING")

            return {
                'success': True,
                'subreddit': subreddit_name,
                'saved': saved_count,
                'skipped': skipped_count,
                'semantic_duplicates': semantic_duplicates,
                'editorial_processed': editorial_processed_count,
                'errors': error_count,
                'retries': retry_count
            }

        except RedditAuthError as e:
            # Auth –æ—à–∏–±–∫–∏ –Ω–µ retry
            log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return {
                'success': False,
                'subreddit': subreddit_name,
                'error': str(e),
                'error_type': 'auth',
                'retries': retry_count
            }

        except ResponseException as e:
            if e.response.status_code == 429:
                # Rate limit - exponential backoff
                retry_count += 1
                if retry_count <= max_retries and retry_on_error:
                    wait_time = 2 ** retry_count
                    log(f"‚ö†Ô∏è Rate limit (429). Retry {retry_count}/{max_retries} —á–µ—Ä–µ–∑ {wait_time}s", "WARNING")
                    time.sleep(wait_time)
                    continue
                else:
                    log(f"‚ùå Rate limit exceeded –ø–æ—Å–ª–µ {retry_count} –ø–æ–ø—ã—Ç–æ–∫", "ERROR")
                    return {
                        'success': False,
                        'subreddit': subreddit_name,
                        'error': 'Rate limit exceeded',
                        'error_type': 'rate_limit',
                        'retries': retry_count
                    }
            else:
                last_error = e
                retry_count += 1
                if retry_count <= max_retries and retry_on_error:
                    log(f"‚ö†Ô∏è HTTP {e.response.status_code}. Retry {retry_count}/{max_retries}", "WARNING")
                    time.sleep(2)
                    continue
                else:
                    log(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {retry_count} –ø–æ–ø—ã—Ç–æ–∫: {e}", "ERROR")
                    return {
                        'success': False,
                        'subreddit': subreddit_name,
                        'error': str(e),
                        'error_type': 'http',
                        'retries': retry_count
                    }

        except Exception as e:
            last_error = e
            retry_count += 1
            if retry_count <= max_retries and retry_on_error:
                log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}. Retry {retry_count}/{max_retries}", "WARNING")
                time.sleep(2)
                continue
            else:
                log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {retry_count} –ø–æ–ø—ã—Ç–æ–∫: {e}", "ERROR")
                if debug:
                    import traceback
                    log(f"Traceback: {traceback.format_exc()}", "DEBUG")
                return {
                    'success': False,
                    'subreddit': subreddit_name,
                    'error': str(e),
                    'error_type': 'unknown',
                    'retries': retry_count
                }

    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –≤—Å–µ retry –∏—Å—á–µ—Ä–ø–∞–Ω—ã
    return {
        'success': False,
        'subreddit': subreddit_name,
        'error': str(last_error),
        'error_type': 'max_retries_exceeded',
        'retries': retry_count
    }


def scrape_multiple_subreddits(
    subreddits: list,
    max_posts: int = 1,  # üéØ –ò–ó–ú–ï–ù–ï–ù–û: –¥–µ—Ñ–æ–ª—Ç 1 –≤–º–µ—Å—Ç–æ 50
    sort_by: str = 'hot',
    delay: int = 5,
    enable_llm: bool = True,
    log_callback: Optional[Callable[[str, str], None]] = None,  # üÜï –î–û–ë–ê–í–õ–ï–ù–û
    stop_on_auth_error: bool = True,  # üÜï –î–û–ë–ê–í–õ–ï–ù–û
    debug: bool = False  # üÜï –î–û–ë–ê–í–õ–ï–ù–û
) -> list:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö subreddits –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.

    Args:
        subreddits: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π subreddits
        max_posts: –ú–∞–∫—Å–∏–º—É–º –ø–æ—Å—Ç–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–π subreddit (–¥–µ—Ñ–æ–ª—Ç: 1)
        sort_by: –¢–∏–ø —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É subreddits –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        enable_llm: –í–∫–ª—é—á–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        log_callback: Callback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        stop_on_auth_error: –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        debug: –í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ subreddit
    """
    def log(message: str, level: str = "INFO"):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        logger_func = getattr(logger, level.lower(), logger.info)
        logger_func(message)

        if log_callback:
            try:
                log_callback(message, level)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –≤ log_callback: {e}")

    results = []

    log(f"–ù–∞—á–∞–ª–æ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(subreddits)} subreddits")
    log(f"Editorial –æ–±—Ä–∞–±–æ—Ç–∫–∞: {'–í–∫–ª—é—á–µ–Ω–∞' if enable_llm else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}")

    if debug:
        log(f"DEBUG —Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω", "DEBUG")
        log(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: max_posts={max_posts}, sort={sort_by}, delay={delay}s", "DEBUG")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
    try:
        get_reddit_client(debug=debug)
        log("‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–∞")
    except RedditAuthError as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º: {e}", "ERROR")
        log("‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ò—Å–ø—Ä–∞–≤—å—Ç–µ credentials –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", "ERROR")
        return [{
            'success': False,
            'error': str(e),
            'error_type': 'auth_pre_check'
        }]

    for i, sub in enumerate(subreddits, 1):
        log(f"[{i}/{len(subreddits)}] –û–±—Ä–∞–±–æ—Ç–∫–∞ r/{sub}")

        try:
            result = scrape_subreddit(
                sub,
                max_posts,
                sort_by,
                enable_llm=enable_llm,
                log_callback=log_callback,
                debug=debug
            )
            results.append(result)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ auth –æ—à–∏–±–∫—É
            if not result['success'] and result.get('error_type') == 'auth':
                if stop_on_auth_error:
                    log("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", "ERROR")
                    log("   –ò—Å–ø—Ä–∞–≤—å—Ç–µ credentials –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞.", "ERROR")
                    break

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É subreddits (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i < len(subreddits):
                time.sleep(delay)

        except Exception as e:
            log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ r/{sub}: {e}", "ERROR")
            results.append({
                'success': False,
                'subreddit': sub,
                'error': str(e),
                'error_type': 'critical'
            })

    # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    successful = [r for r in results if r.get('success')]
    failed = [r for r in results if not r.get('success')]

    total_saved = sum(r.get('saved', 0) for r in successful)
    total_semantic = sum(r.get('semantic_duplicates', 0) for r in successful)
    total_editorial = sum(r.get('editorial_processed', 0) for r in successful)

    log("–ú–∞—Å—Å–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω:")
    log(f"  ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {len(successful)}/{len(results)} subreddits")
    if failed:
        log(f"  ‚Ä¢ –û—à–∏–±–æ–∫: {len(failed)}", "WARNING")
    log(f"  ‚Ä¢ –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {total_saved}")
    log(f"  ‚Ä¢ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {total_semantic}")
    log(f"  ‚Ä¢ Editorial –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_editorial}")

    return results


# ============================================================================
# CLI –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# ============================================================================

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Reddit Scraper —Å DEBUG —Ä–µ–∂–∏–º–æ–º")
    parser.add_argument(
        "subreddit",
        nargs="?",
        default="python",
        help="Subreddit –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: python)"
    )
    parser.add_argument(
        "--max-posts",
        type=int,
        default=1,
        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)"
    )
    parser.add_argument(
        "--debug",
        action="store_true",
        help="–í–∫–ª—é—á–∏—Ç—å DEBUG —Ä–µ–∂–∏–º"
    )
    parser.add_argument(
        "--no-llm",
        action="store_true",
        help="–û—Ç–∫–ª—é—á–∏—Ç—å Editorial –æ–±—Ä–∞–±–æ—Ç–∫—É"
    )

    args = parser.parse_args()

    print("=" * 70)
    print("REDDIT SCRAPER - –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫")
    print("=" * 70)
    print(f"Subreddit: r/{args.subreddit}")
    print(f"Max posts: {args.max_posts}")
    print(f"Debug: {args.debug}")
    print(f"Editorial: {not args.no_llm}")
    print("=" * 70 + "\n")

    result = scrape_subreddit(
        subreddit_name=args.subreddit,
        max_posts=args.max_posts,
        enable_llm=not args.no_llm,
        debug=args.debug
    )

    print("\n" + "=" * 70)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢")
    print("=" * 70)
    print(f"Success: {result['success']}")
    if result['success']:
        print(f"Saved: {result.get('saved', 0)}")
        print(f"Skipped: {result.get('skipped', 0)}")
        print(f"Semantic duplicates: {result.get('semantic_duplicates', 0)}")
        print(f"Editorial: {result.get('editorial_processed', 0)}")
    else:
        print(f"Error: {result.get('error')}")
        print(f"Error type: {result.get('error_type')}")